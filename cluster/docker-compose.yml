---
version: '3.9'
services:
  zookeeper:
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:${TAG}
    ports:
      - '32181:32181'
      - '11091:11091'
    environment:
      ZOOKEEPER_CLIENT_PORT: 32181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_JMX_PORT: 11091
      KAFKA_JMX_HOSTNAME: zookeeper
      #ZOOKEEPER_SERVER_OPTS: "-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=11091"
    volumes:
      - data-zookeeper-log:/var/lib/zookeeper/log
      - data-zookeeper-data:/var/lib/zookeeper/data
    healthcheck:
      interval: 10s
      retries: 25
      test: echo srvr | nc zookeeper 32181 || exit 1

  jmx-exporter-zookeeper:
    image: bitnami/jmx-exporter:latest
    hostname: jmx-exporter-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - '5557:5557'
    volumes:
      - ./docker/jmx-exporter/zookeeper/config.yml:/etc/config.yml
    command: ["5557", "/etc/config.yml"]

  kafka:
    hostname: kafka
    image: confluentinc/cp-server:${TAG}
    ports:
      - '10092:10092'
      - '10091:10091'
    depends_on:
      zookeeper:
        condition: service_healthy
    volumes:
      - data-kafka:/var/lib/kafka/data
      - ./docker/kafka/log4j.properties.template:/etc/confluent/docker/log4j.properties.template:ro
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:32181
      # INTERNAL for interbroker, IN_DOCKER for clients inside Docker, OUT_DOCKER for access from Mac
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT, IN_DOCKER:PLAINTEXT, OUT_DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092, IN_DOCKER://kafka:9092, OUT_DOCKER://localhost:10092
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      #KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.request.logger=INFO"
      # Extracting client version, ID and principal from request logger while filtering most messages
      KAFKA_LOG4J_LOGGERS: "kafka.request.logger=DEBUG"
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1 # license config
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1 # Self-balancing cluster
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_SCHEMA_REGISTRY_URL: http://schema-registry:8081 # Broker side validation
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka:9092"
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      #KAFKA_JMX_OPTS: "-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.rmi.port=10091"
      # IMPORTANT: For remote access e.g. by JConsole on different Host, configure the hostname as seen from that external host here.
      # During initialization of the JMX session, the external client (e.g. JConsole) will query that hostname and the JMX port and tries to connect to it
      # Thus, in general using something like e.g. "localhost" or "kafka" won't work
      # Set environment variable EXTERNAL_HOSTNAME to your external resolvable hostname
      #KAFKA_JMX_HOSTNAME: ${EXTERNAL_HOSTNAME}
      # Use this hostname to allow connections from jmx exporter running in another docker container
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_JMX_PORT: 10091
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server localhost:9092
      interval: 10s
      retries: 25
      start_period: 20s

  jmx-exporter-kafka:
    image: bitnami/jmx-exporter:latest
    hostname: jmx-exporter-kafka
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - '5556:5556'
    volumes:
      - ./docker/jmx-exporter/kafka/config.yml:/etc/config.yml
    command: ["5556", "/etc/config.yml"]

  control-center:
    image: confluentinc/cp-enterprise-control-center:${TAG}
    hostname: control-center
    container_name: control-center
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      #CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  schema-registry:
    hostname: schema-registry
    image: confluentinc/cp-schema-registry:${TAG}
    ports:
      - 8081:8081
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      # Data Contracts, started in 7.4
      #SCHEMA_REGISTRY_RESOURCE_EXTENSION_CLASS: io.confluent.kafka.schemaregistry.rulehandler.RuleSetResourceExtension
    healthcheck:
      interval: 10s
      retries: 20
      test: curl http://localhost:8081/ --output /dev/null || exit 1

  prometheus:
    hostname: prometheus
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./docker/prometheus/:/etc/prometheus/
      - data-prometheus:/prometheus
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - '--web.listen-address=:9101'
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9101:9101
    restart: always
    deploy:
      mode: global

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./docker/alertmanager/:/etc/alertmanager/
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    logging:
      driver: local
    volumes:
      - data-grafana:/var/lib/grafana
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - "GF_SECURITY_ADMIN_USER=kafka"
      - "GF_SECURITY_ADMIN_PASSWORD=kafka"
      - "GF_USERS_ALLOW_SIGN_UP=false"
    ports:
      - 3000:3000
  ubuntu:
    image: ubuntu
    tty: true

volumes:
  data-zookeeper-log:
  data-zookeeper-data:
  data-kafka:
  data-prometheus:
  data-grafana:
