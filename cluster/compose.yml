---
services:

  broker:
    image: confluentinc/cp-server:${CP_VERSION}
    hostname: broker
    container_name: broker
    networks:
      - kafka
    ports:
      - "9092:29092"
      - "10091:10091"
    healthcheck:
      test: kafka-broker-api-versions --bootstrap-server broker:9092
      interval: 10s
      retries: 25
      start_period: 20s
    volumes:
      - data-kafka:/var/lib/kafka/data
      - ./docker/kafka/log4j.properties.template:/etc/confluent/docker/log4j.properties.template:ro
    environment:
      # From Fred
      # From Fred
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_JMX_PORT: 10091
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:9092,CONTROLLER://broker:9093,PLAINTEXT_HOST://0.0.0.0:29092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_CONFLUENT_CLUSTER_LINK_ENABLE: "false"
      # BEGIN MAYBE REQUIRED
      #KAFKA_CONFLUENT_REPORTERS_TELEMETRY_AUTO_ENABLE: 'false'
      #KAFKA_CONFLUENT_TELEMETRY_ENABLED: 'false'
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: "false"
      KAFKA_CONFLUENT_BALANCER_ENABLE: "false"
      #CONFLUENT_METRICS_ENABLE: "false"
      # END MAYBE REQUIRED
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICA: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 12
      KAFKA_LOG_SEGMENT_BYTES: 1048576 #1Mb
      KAFKA_LOG_RETENTION_BYTES: 134217728 #128Mb
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "broker:9092"

  jmx-exporter-kafka:
    image: bitnami/jmx-exporter:latest
    hostname: jmx-exporter-kafka
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - kafka
    ports:
      - '5556:5556'
    volumes:
      - ./docker/jmx-exporter/kafka/config.yml:/etc/config.yml
    command: ["5556", "/etc/config.yml"]

  schema-registry:
    image: confluentinc/cp-schema-registry:${CP_VERSION}
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    networks:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:9092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_RESOURCE_EXTENSION_CLASS: "io.confluent.kafka.schemaregistry.rulehandler.RuleSetResourceExtension"

  control-center:
    image: confluentinc/cp-enterprise-control-center:${CP_VERSION}
    hostname: control-center
    container_name: control-center
    profiles:
      - controlcenter
    depends_on:
      - broker
      - schema-registry
    networks:
      - kafka
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:9092'
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  prometheus:
    hostname: prometheus
    image: prom/prometheus:latest
    networks:
      - kafka
    ports:
      - 9090:9090
    volumes:
      - ./docker/prometheus/:/etc/prometheus/
      - data-prometheus:/prometheus
  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command:
      - '--web.listen-address=:9101'
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - kafka
    ports:
      - 9101:9101
    restart: always
    deploy:
      mode: global

  # alertmanager:
  #   image: prom/alertmanager
  #   networks:
  #     - kafka
  #   ports:
  #     - 9093:9093
  #   volumes:
  #     - ./docker/alertmanager/:/etc/alertmanager/
  #   restart: always
  #   command:
  #     - '--config.file=/etc/alertmanager/config.yml'
  #     - '--storage.path=/alertmanager'
  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
    logging:
      driver: local
    volumes:
      - data-grafana:/var/lib/grafana
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - "GF_SECURITY_ADMIN_USER=kafka"
      - "GF_SECURITY_ADMIN_PASSWORD=kafka"
      - "GF_USERS_ALLOW_SIGN_UP=false"
    networks:
      - kafka
    ports:
      - 3000:3000

networks:
  kafka:

volumes:
  data-kafka:
  data-prometheus:
  data-grafana:
